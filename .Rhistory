blogdown:::insert_image_addin()
165*5
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::update_meta_addin()
blogdown:::insert_image_addin()
800/900
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
library(ggplot2)
getwd()
setwd("~/My_Website/content/post")
knitr::opts_chunk$set(echo = TRUE,message = FALSE)
source("utilities.R")
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::update_meta_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
library(ggplot2)
n <- c(1:20)
f_n <- 1/n
df <- data.frame(x=n,y=f_n)
df
ggplot(data,aes(x=x,y=y))+ geom_bar()
ggplot(data=df,aes(x=x,y=y))+ geom_bar()
ggplot(data=df)+ geom_bar(aes(x=x,y=y))
ggplot(data=df)+ geom_bar()
ggplot(data=df)+ geom_bar(x=x)
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity")
n <- c(1:20:0.01)
n <- seq(0,1,0.01)
length(n)
f_n <- 1/n
df <- data.frame(x=n,y=f_n)
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity")
n <- seq(0,1,0.1)
f_n <- 1/n
df <- data.frame(x=n,y=f_n)
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity")
n <- seq(0,20,0.1)
f_n <- 1/n
df <- data.frame(x=n,y=f_n)
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity")
n <- seq(0,20,0.01)
f_n <- 1/n
df <- data.frame(x=n,y=f_n)
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity")
n <- seq(0,20,0.1)
f_n <- 1/n
df <- data.frame(x=n,y=f_n)
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity")
1/exp(1)
blogdown:::new_post_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
library(ggplot2)
n <- c(1:20)
f_n <- 1/n
df <- data.frame(x=n,y=f_n)
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity")
library(ggplot2)
n <- c(1:20)
f_n <- 1/n
df <- data.frame(x=n,y=f_n)
fun1 <- function(x) 1/x
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity")+ stat_function(fun=fun1)
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity")+ stat_function(fun=fun1,col='blue')
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity",fill='cornfloweblue')+ stat_function(fun=fun1,col='blue')
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity",fill='cornflowerblue')+ stat_function(fun=fun1,col='blue')
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity",fill='cornflowerblue')+ stat_function(fun=fun1,col='red')
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity",fill='cornflowerblue')+ stat_function(fun=fun1,col='red')+
scale_color_manual(name = "1/x",values='red')
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity",fill='cornflowerblue')+ stat_function(fun=fun1,col='red')+
scale_color_manual(name = "1/x",values=c('red'))
p <- ggplot(data = data.frame(x = 0), mapping = aes(x = x))
stat = "function",
fun = fun.1,          # Give function
mapping = aes(color = "fun.1") # Give a meaningful name to color
) +
scale_x_continuous(limits = c(-5,5)) +
scale_color_manual(name = "Function", values = c("blue"))
p + layer(geom = "path",        # Default. Can be omitted.
stat = "function",
fun = fun.1,          # Give function
mapping = aes(color = "fun.1") # Give a meaningful name to color
) +
scale_x_continuous(limits = c(-5,5)) +
scale_color_manual(name = "Function", values = c("blue"))
fun.1 <- function(x) x^2 + x
p + layer(geom = "path",        # Default. Can be omitted.
stat = "function",
fun = fun.1,          # Give function
mapping = aes(color = "fun.1") # Give a meaningful name to color
) +
scale_x_continuous(limits = c(-5,5)) +
scale_color_manual(name = "Function", values = c("blue"))
p + layer(geom = "path",        # Default. Can be omitted.
stat = "function",
fun = fun.1,          # Give function
mapping = aes(color = "fun.1") # Give a meaningful name to color
) +
scale_x_continuous(limits = c(-5,5)) +
scale_color_manual(name = "Function", values = c("blue"))
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity",fill='cornflowerblue')+ stat_function(fun=fun1,col='red')+
scale_color_manual(values=c('1/x'='red'))
library(ggplot2)
n <- c(1:20)
f_n <- 1/n
df <- data.frame(x=n,y=f_n)
fun1 <- function(x) 1/x
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity",fill='cornflowerblue')+ geom_function(fun=fun1,aes(col='red'))
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity",fill='cornflowerblue')+ geom_function(fun=fun1,aes(col='1/x'))
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity",fill='cornflowerblue')+ geom_function(fun=fun1,aes(col='1/x'))
+scale_fill_manual('legend'=NULL)
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity",fill='cornflowerblue')+ geom_function(fun=fun1,aes(col='1/x'))
+theme(legend.title=element_blank())
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity",fill='cornflowerblue')+ geom_function(fun=fun1,aes(col='1/x'))+
theme(legend.title=element_blank())
n <- seq(0,20,0.1)
f_n <- 1/n
df <- data.frame(x=n,y=f_n)
ggplot(data=df,aes(x=x,y=y))+ geom_bar(stat="identity",fill='cornflowerblue')+ geom_function(fun=fun1,aes(col='1/x'))+
theme(legend.title=element_blank())
Fr <- function(r,N=100){
return(r+N)
}
Fr(r=5)
seq(1,10)
sum(1/(seq(r,N-1)))
sum(1/(seq(5,100-1)))
Fr <- function(r,N=100){
return((r/N)*sum(1/(seq(r,N-1))))
}
optim(c(1:100),Fr)
Fr <- function(r,N=100){
return((r/N)*sum(1/(seq(from=r,to=N-1))))
}
Fr <- function(r,N=100){
(r/N)*sum(1/(seq(from=r,to=N-1)))
}
optim(c(1:100),Fr)
optim(1,Fr)
optim(2,Fr)
optim(3,Fr)
optimize(Fr,interval=c(1:100))
optimize(-Fr,interval=c(1:100))
optimize(-Fr,interval=c(1:100),maximum=TRUE)
optimize(Fr,interval=c(1:100),maximum=TRUE)
optimize(Fr,interval = c(1:10000),maximum=TRUE)
Fr <- function(r,N=10000){
(r/N)*sum(1/(seq(from=r,to=N-1)))
}
optimize(Fr,interval = c(1:10000),maximum=TRUE)
q <- runif(100)
set.seed(0)
q <- runif(100)
max(q)
(best_candidate_quality <- max(q))
which(q==best_candidate_quality)
set.seed(1)
q <- runif(100)
(best_candidate_quality <- max(q))
which(q==best_candidate_quality)
set.seed(99)
q <- runif(100)
(best_candidate_quality <- max(q))
which(q==best_candidate_quality)
set.seed(999)
q <- runif(100)
(best_candidate_quality <- max(q))
which(q==best_candidate_quality)
best_candidate <- function(r,q){
#r : stopping point
#q : vector giving quality of candidates
#Step 1: Find the best candidate in the range 1:r (i.e. up to the stopping point)
best_1 <- max(q[1:r])
# Step 2: Find the best candidate in the range r+1:N
best_2 <- max(q[(r+1):length(q)])
#If best2 >best 1, our strategy will find the optimal candidate, else we will pick the last candidate
if (best_2 >= best_1){
candidate_value <- best_2
candidate_selected <- which(q==optimal_value)
}else{
candidate_selected <- length(q)
candidate_value <- q[candidate_selected]
}
return(c(candidate_selected,candidate_value))
}
best_candidate(10,q)
r=`0`
r=10
#Step 1: Find the best candidate in the range 1:r (i.e. up to the stopping point)
best_1 <- max(q[1:r])
# Step 2: Find the best candidate in the range r+1:N
best_2 <- max(q[(r+1):length(q)])
best_1
best_2
(best_2 >= best_1)
best_candidate <- function(r,q){
#r : stopping point
#q : vector giving quality of candidates
#Step 1: Find the best candidate in the range 1:r (i.e. up to the stopping point)
best_1 <- max(q[1:r])
# Step 2: Find the best candidate in the range r+1:N
best_2 <- max(q[(r+1):length(q)])
#If best2 >best 1, our strategy will find the optimal candidate, else we will pick the last candidate
if (best_2 >= best_1){
candidate_value <- best_2
candidate_selected <- which(q==candidate_value)
}else{
candidate_selected <- length(q)
candidate_value <- q[candidate_selected]
}
return(c(candidate_selected,candidate_value))
}
best_candidate(10,q)
best_candidate(70,q)
sample(c(1:10))
experiment <- function(N,r){
#N: No of experiments to run
#r: stopping point to be tested
#C : counter to keep track of number of times optimal cnadidate was selected
C <- 0
for (i in seq_len(N)){
set.seed(i)
q_new <- sample(q)
if (best_candidate(r,q_new)[2]==best_candidate_quality){
C <-  C + 1
}
}
return(C)
}
experiment(100,10)
experiment(100,20)
experiment(100,30)
experiment(100,40)
experiment(100,50)
best_candidate <- function(r,q){
#r : stopping point
#q : vector giving quality of candidates
#Step 1: Find the best candidate in the range 1:r (i.e. up to the stopping point)
best_1 <- max(q[1:r])
# Step 2: Find the best candidate in the range r+1:N
best_2 <- max(q[(r+1):length(q)])
#If best2 >best 1, our strategy will find the optimal candidate, else we will pick the last candidate
if (best_2 >= best_1){
candidate_value <- best_2
candidate_selected <- which(q==candidate_value)
}else{
candidate_selected <- length(q)
candidate_value <- q[candidate_selected]
}
return(c(candidate_selected,candidate_value))
}
experiment <- function(N,r){
#N: No of experiments to run
#r: stopping point to be tested
#C : counter to keep track of number of times optimal cnadidate was selected
C <- 0
for (i in seq_len(N)){
set.seed(i)
q_new <- sample(q)
if (best_candidate(r,q_new)[2]==best_candidate_quality){
C <-  C + 1
}
}
return(C)
}
experiment(100,10)
length(q)
best_candidate(10,sample(q))
best_candidate(10,sample(q))
best_candidate(10,sample(q))
best_candidate(10,sample(q))
best_candidate(10,sample(q))
best_candidate(10,sample(q))
best_candidate(10,sample(q))
best_candidate(10,sample(q))
temp <- c(1,2,3,4)
temp <- c(1,1,1,3,4)
which(temp==1)
which(temp==1)[1]
which(rep(FALSE,5)==TRUE)
which(rep(TRUE,5)==TRUE)
class(integer(0))
class(c(1,2))
integer(0)==NA
best_candidate <- function(r,q){
#r : stopping point
#q : vector giving quality of candidates
#Step 1: Find the best candidate in the range 1:r (i.e. up to the stopping point)
best_1 <- max(q[1:r])
# Step 2: Find the first candidate after the stopping point who is better than the best candidate before the stopping point
best_2 <- which((q[(r+1):length(q)]>best_1) == TRUE)[1]
selected_candidate <- ifelse(length(best_2)==0,length(q),r+best_2)
selected_candidate_value <- q[selected_candidate]
return(c(selected_candidate,selected_candidate_value))
}
best_andidate(10,q)
best_candidate(10,q)
best_candidate(15,q)
best_candidate(1,q)
best_candidate(5,q)
best_candidate(9,q)
best_candidate(9,sample(q))
best_candidate(5,q)
q[14]
experiment <- function(N,r){
#N: No of experiments to run
#r: stopping point to be tested
#C : counter to keep track of number of times optimal candidate was selected
C <- 0
for (i in seq_len(N)){
set.seed(i)
q_new <- sample(q)
if (best_candidate(r,q_new)[2]==best_candidate_quality){
C <-  C + 1
}
}
return(C)
}
experiment(100,10)
best_candidate <- function(r,q){
#r : stopping point
#q : vector giving quality of candidates
#Step 1: Find the best candidate in the range 1:r (i.e. up to the stopping point)
best_1 <- max(q[1:r])
# Step 2: Find the first candidate after the stopping point who is better than the best candidate before the stopping point
best_2 <- which((q[(r+1):length(q)]>best_1) == TRUE)[1]
selected_candidate <- ifelse(length(best_2)==0,length(q),r+best_2)
selected_candidate_value <- q[selected_candidate]
return(c(selected_candidate,selected_candidate_value))
}
experiment <- function(N,r){
#N: No of experiments to run
#r: stopping point to be tested
#C : counter to keep track of number of times optimal candidate was selected
C <- 0
for (i in seq_len(N)){
set.seed(i)
q_new <- sample(q)
if (best_candidate(r,q_new)[2]==best_candidate_quality){
C <-  C + 1
}
}
return(C)
}
experiment(100,10)
best_candidate_quality
best_candidate <- function(r,q){
#r : stopping point
#q : vector giving quality of candidates
#Step 1: Find the best candidate in the range 1:r (i.e. up to the stopping point)
best_1 <- max(q[1:r])
# Step 2: Find the first candidate after the stopping point who is better than the best candidate before the stopping point
best_2 <- which((q[(r+1):length(q)]>=best_1) == TRUE)
selected_candidate <- ifelse(length(best_2)==0,length(q),r+best_2)
selected_candidate_value <- q[selected_candidate]
return(c(selected_candidate,selected_candidate_value))
}
experiment(100,10)
experiment(100,20)
experiment(100,60)
experiment(100,30)
experiment(100,40)
experiment <- function(r,N){
#N: No of experiments to run
#r: stopping point to be tested
#C : counter to keep track of number of times optimal candidate was selected
C <- 0
for (i in seq_len(N)){
set.seed(i)
q_new <- sample(q)
if (best_candidate(r,q_new)[2]==best_candidate_quality){
C <-  C + 1
}
}
return(C)
}
stop_points <- c(10,20,37,40,50,60,70,80,90)
results <- sapply(stop_points,experiment,100)
results
stop_points <- c(10,20,37,40,50,60,70,80,90)
results <- sapply(stop_points,experiment,1000)
results
stop_points <- c(10,20,37,40,50,60,70,80,90)
(results <- sapply(stop_points,experiment,1000))
stop_points <- c(10,20,37,40,50,60,70,80,90)
(results <- sapply(stop_points,experiment,1000))
stop_points <- c(10,20,37,40,50,60,70,80,90)
(results <- sapply(stop_points,experiment,1000))
experiment <- function(r,N){
#N: No of experiments to run
#r: stopping point to be tested
#C : counter to keep track of number of times optimal candidate was selected
C <- 0
for (i in seq_len(N)){
q_new <- sample(q)
if (best_candidate(r,q_new)[2]==best_candidate_quality){
C <-  C + 1
}
}
return(C)
}
stop_points <- c(10,20,37,40,50,60,70,80,90)
(results <- sapply(stop_points,experiment,1000))
stop_points <- c(10,20,37,40,50,60,70,80,90)
(results <- sapply(stop_points,experiment,1000))
stop_points <- c(10,20,37,40,50,60,70,80,90)
(results <- sapply(stop_points,experiment,1000))
stop_points <- c(10,20,37,40,50,60,70,80,90)
(results <- sapply(stop_points,experiment,1000))
stop_points <- c(10,20,37,40,50,60,70,80,90)
(results <- sapply(stop_points,experiment,1000))
set.seed(0)
stop_points <- c(10,20,37,40,50,60,70,80,90)
(results <- sapply(stop_points,experiment,1000))
ggplot(a=stop_points,y=results)+geom_bar()
ggplot(a=stop_points,y=results)+geom_bar(stat='identity)
ggplot(x=stop_points,y=results)+geom_bar(stat='identity)
ggplot(x=stop_points,y=results)+ geom_bar(stat='identity')
?ggplot
df <- data.frame(x=stop_points,y=results)
ggplot(df,aes(x=x,y=y))+ geom_bar(stat='identity')
ggplot(df,aes(x=x,y=y))+ geom_bar(stat='identity')+labs(x='Stopping Point',y='No of Wins')
ggplot(df,aes(x=x,y=y))+ geom_bar(stat='identity')+labs(x='Stopping Point',y='No of Optimal Selections')
df <- data.frame(x=stop_points,y=results)
ggplot(df,aes(x=x,y=y))+ geom_bar(stat='identity')+labs(x='Stopping Point',y='No of Optimal Selections')+
scale_x_continuous(labels=stop_points)
df <- data.frame(x=stop_points,y=results)
ggplot(df,aes(x=x,y=y))+ geom_bar(stat='identity')+labs(x='Stopping Point',y='No of Optimal Selections')+
scale_x_continuous(breaks=stop_points,labels=stop_points)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
install.packages("rmdfiltr")
blogdown:::serve_site()
library(rmdfiltr)
blogdown:::serve_site()
blogdown:::serve_site()
plot(density(rnorm(1000,0,1)))
plot(density(rnorm(1000,0,10)))
plot(density(rnorm(1000,0,10)),xlim=c(02,2))
plot(density(rnorm(1000,0,10)),xlim=c(-2,2))
plot(density(rnorm(1000,0,2)),xlim=c(-2,2))
plot(density(rnorm(1000,0,1)),xlim=c(-2,2))
plot(density(rnorm(10000,0,1)),xlim=c(-2,2))
plot(density(rnorm(10000,0,5)),xlim=c(-2,2))
plot(density(rnorm(10000,0,3)),xlim=c(-2,2))
plot(density(rnorm(10000,0,.5)),xlim=c(-2,2))
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
