blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
0.9^5
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::update_meta_addin()
blogdown:::new_post_addin()
prcomp(X)
set.seed(0)
X <- matrix(rnorm(50,10,5),ncol=5)
print(paste0("Dimensions of X: ",dim(X)[1],"x",dim(X)[2]))# 10x5
UDV_t <- svd(X)
U <- UDV_t$u
print(paste0("Dimensions of U: ",dim(U)[1],"x",dim(U)[2])) #10x5
D <- diag(UDV_t$d)
print(paste0("Dimensions of D: ",dim(D)[1],"x",dim(D)[2])) #5x5
V <- UDV_t$v
print(paste0("Dimensions of V: ",dim(V)[1],"x",dim(V)[2])) #5x5
#V.V^T = I
VdotVt = V %*% t(V)
all.equal(VdotVt,diag(5))
#V^T.V = I
VtdotV = t(V) %*% V
all.equal(VtdotV,diag(5))
#Calculate length of the rows and columns
apply(V,1,norm,"2")
apply(V,2,norm,"2")
dim(U)
all.equal(t(U)%*%U,diag(5))
all.equal(U%*%t(U),diag(10))
apply(U,1,len)
set.seed(0)
X <- matrix(rnorm(50,10,5),ncol=5)
print(paste0("Dimensions of X: ",dim(X)[1],"x",dim(X)[2]))# 10x5
UDV_t <- svd(X)
U <- UDV_t$u
print(paste0("Dimensions of U: ",dim(U)[1],"x",dim(U)[2])) #10x5
D <- diag(UDV_t$d)
print(paste0("Dimensions of D: ",dim(D)[1],"x",dim(D)[2])) #5x5
V <- UDV_t$v
print(paste0("Dimensions of V: ",dim(V)[1],"x",dim(V)[2])) #5x5
#V.V^T = I
VdotVt = V %*% t(V)
all.equal(VdotVt,diag(5))
#V^T.V = I
VtdotV = t(V) %*% V
all.equal(VtdotV,diag(5))
#Calculate length of the rows and columns
apply(V,1,norm,"2")
apply(V,2,norm,"2")
dim(U)
all.equal(t(U)%*%U,diag(5))
all.equal(U%*%t(U),diag(10))
apply(U,1,norm,"2")
apply(U,2,norm,"2")
all.equal (X, U%*%D%*%t(V))
all.equal (X, -U%*%D%*%-t(V))
pca <- prcomp(X)
pca$rotation
t(X[1,]) %*% pca$rotation[,c(1,2)]
#1x5  x  5x2
n <- nrow(X)
col_means <- colMeans(X)
X_bar <- sweep(X,2,col_means)
svd_X <- svd(X_bar)
svd_cov_mat$u
svd_X <- svd(X_bar)
svd_X$u
svd_X$v
svd_X$v
svd_X_bar$u
svd_X_bar <- svd(X_bar)
svd_X_bar$v
svd_X_bar$u
(X_bar)%*% svd_X_bar$v
#10x5 X 5x5
(u <- svd_X_bar$u)
(pc <- (X_bar)%*% svd_X_bar$v)
#10x5 X 5x5
pc/u
apply(pc/u,2,unique)
apply(pc/u,1,unique)
pc/u
temp2 <- pc/u
apply(temp2,1,mean)
apply(temp2,2,mean)
apply(temp2,2,unique)
?unique
pc/u[1,]
(pc/u)[1,]
X
col_means
X_bar
apply(X_bar,2,sd)
apply(X,2,sd)
svd_X_bar$d
svd_X_bar$d
?prcomp
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
10000*500
set.seed(999)
X_large <- matrix(rnorm(10000*100,10,5),ncol=100)
set.seed(999)
missing_l<- matrix(sample(c(rep(FALSE,10000*90),rep(TRUE,10000*10))),nr=5)
X_missing_l <- X_large
X_missing_l[missing_l] <- NA
#Calculate column means
X_col_means_l <- apply(X_missing_l,2,mean,na.rm=TRUE)
#loop through each column and replace missing values with mean of the column
X_imputed_l <- X_missing_l
for (i in c(1:ncol(X_imputed_l))){
v <- X_imputed_l[,i]
v[is.na(v)] <- X_col_means_l[i]
X_imputed_l[,i] <- v
}
set.seed(999)
X_large <- matrix(rnorm(10000*100,10,5),ncol=100)
set.seed(999)
missing_l<- matrix(sample(c(rep(FALSE,10000*90),rep(TRUE,10000*10))),ncol=100)
X_missing_l <- X_large
X_missing_l[missing_l] <- NA
(baseline_l <- quality(X_large[missing_l],X_imputed_l[missing_l]))
quality <- function(X,Y){sqrt(sum((X-Y)^2))}
(baseline_l <- quality(X_large[missing_l],X_imputed_l[missing_l]))
rank_k_approx <- function (X,k){
#X: matrix to be approximate
#k: rank of approximation
svd_X <- svd(X)
U <- svd_X$u
D <- diag(svd_X$d)
V <- svd_X$v
repr <- matrix(0,nrow(X),ncol(X))
for (i in 1:k){
repr <- repr +  D[i,i]*U[,i]%*%t(V[,i])
}
return(repr)
}
impute_with_SVD <- function(X_missing,k){
# X_missing: Matrix with missing values
# k: rank of approximation to be used
#Calculate column means
X_col_means <- apply(X_missing,2,mean,na.rm =TRUE)
#identify missing elements
missing <- is.na(X_missing)
#loop through each column and replace missing values with mean of the column
for (i in c(1:ncol(X))){
v <- X_missing[,i]
v[is.na(v)] <- X_col_means[i]
X_missing[,i] <- v
}
#Center the values on 0
#X_missing <- sweep(X_missing,2,X_col_means)
#Record newly imputed values in a vector
imputed <- X_missing[missing]
j<- 1
#record imputed elements in each iteration
imputed_list <- list()
imputed_list[[j]] <- imputed
while(TRUE){
##Compute rank-k SVD approximation
X_approx <- rank_k_approx(X_missing,k)
#Replace missing values with new approximation
X_missing[missing] <- X_approx[missing]
# break out of loop if imputed values stop changing
if (max(abs(imputed-X_approx[missing])) < 0.001 ) {break}
j <- j + 1
imputed <- X_approx[missing]
imputed_list[[j]] <- imputed
}
return(list(imputed_list,X_missing))
}
imputed_list_l <- list()
for (i in c(1:5)){
imputed_list_l[[i]] <-impute_with_SVD(X_missing_l,i)
}
rank_k_approx <- function (X,k){
#X: matrix to be approximate
#k: rank of approximation
svd_X <- svd(X)
U <- svd_X$u
D <- diag(svd_X$d)
V <- svd_X$v
repr <- matrix(0,nrow(X),ncol(X))
for (i in 1:k){
repr <- repr +  D[i,i]*U[,i]%*%t(V[,i])
}
return(repr)
}
impute_with_SVD <- function(X_missing,k){
# X_missing: Matrix with missing values
# k: rank of approximation to be used
#Calculate column means
X_col_means <- apply(X_missing,2,mean,na.rm =TRUE)
#identify missing elements
missing <- is.na(X_missing)
#loop through each column and replace missing values with mean of the column
for (i in c(1:ncol(X_missing))){
v <- X_missing[,i]
v[is.na(v)] <- X_col_means[i]
X_missing[,i] <- v
}
#Center the values on 0
#X_missing <- sweep(X_missing,2,X_col_means)
#Record newly imputed values in a vector
imputed <- X_missing[missing]
j<- 1
#record imputed elements in each iteration
imputed_list <- list()
imputed_list[[j]] <- imputed
while(TRUE){
##Compute rank-k SVD approximation
X_approx <- rank_k_approx(X_missing,k)
#Replace missing values with new approximation
X_missing[missing] <- X_approx[missing]
# break out of loop if imputed values stop changing
if (max(abs(imputed-X_approx[missing])) < 0.001 ) {break}
j <- j + 1
imputed <- X_approx[missing]
imputed_list[[j]] <- imputed
}
return(list(imputed_list,X_missing))
}
imputed_list_l <- list()
for (i in c(1:5)){
imputed_list_l[[i]] <-impute_with_SVD(X_missing_l,i)
}
temp <- impute_with_SVD(X_missing_l,1)
temp
imputed_list_l <- list()
for (i in c(1:5)){
print(i)
imputed_list_l[[i]] <-impute_with_SVD(X_missing_l,i)
}
library(knitr)
quality_df <- data.frame('Method'=c('Column Means','Rank 1 Approx','Rank 2 Approx','Rank 3 Approx','Rank 4 Approx','Rank 5 Approx'),'RMSE' = baseline_l)
for( i in 1:5){
quality_df[i+1,'RMSE'] <- quality(X_large[missing],imputed_list_l[[i]][[2]][missing_l])
}
library(knitr)
quality_df <- data.frame('Method'=c('Column Means','Rank 1 Approx','Rank 2 Approx','Rank 3 Approx','Rank 4 Approx','Rank 5 Approx'),'RMSE' = baseline_l)
for( i in 1:5){
quality_df[i+1,'RMSE'] <- quality(X_large[missing_l],imputed_list_l[[i]][[2]][missing_l])
}
kable(quality_df)
?rnorm
set.seed(999)
#X_large <- matrix(rnorm(10000*100,10,5),ncol=100)
X_large <- matrix(mapply(rnorm,rep(10000*25,4),c(10,20,30,40),c(5,10,15,20)))
View(X_large)
set.seed(999)
#X_large <- matrix(rnorm(10000*100,10,5),ncol=100)
X_large <- matrix(mapply(rnorm,rep(10000*25,4),c(10,20,30,40),c(5,10,15,20)),ncol=100)
dim(X_large)
set.seed(999)
missing_l<- matrix(sample(c(rep(FALSE,10000*90),rep(TRUE,10000*10))),ncol=100)
X_missing_l <- X_large
X_missing_l[missing_l] <- NA
#Calculate column means
X_col_means_l <- apply(X_missing_l,2,mean,na.rm=TRUE)
#loop through each column and replace missing values with mean of the column
X_imputed_l <- X_missing_l
for (i in c(1:ncol(X_imputed_l))){
v <- X_imputed_l[,i]
v[is.na(v)] <- X_col_means_l[i]
X_imputed_l[,i] <- v
}
(baseline_l <- quality(X_large[missing_l],X_imputed_l[missing_l]))
imputed_list_l <- list()
for (i in c(1:3)){
print(i)
imputed_list_l[[i]] <-impute_with_SVD(X_missing_l,i)
}
library(knitr)
quality_df <- data.frame('Method'=c('Column Means','Rank 1 Approx','Rank 2 Approx','Rank 3 Approx'),'RMSE' = baseline_l)
for( i in 1:3){
quality_df[i+1,'RMSE'] <- quality(X_large[missing_l],imputed_list_l[[i]][[2]][missing_l])
}
kable(quality_df)
2+2
X_ <- matrix(mapply(rnorm,rep(10,5),c(10,20,30,40,50),c(5,10,15,20,25)),ncol=5)
colMeans(X_
)
set.seed(999)
X_ <- matrix(mapply(rnorm,rep(10,5),c(10,20,30,40,50),c(5,10,15,15,15)),ncol=5)
colMeans(X_)
set.seed(999)
X_ <- matrix(mapply(rnorm,rep(10,5),c(10,20,30,40,50),c(5,5,5,5,5)),ncol=5)
colMeans(X_)
set.seed(999)
X_ <- matrix(mapply(rnorm,rep(10,5),c(10,20,30,40,50),c(5,5,5,5,5)),ncol=5)
#Identify random missing elements in the matrix
set.seed(999)
missing<- matrix(sample(c(rep(FALSE,40),rep(TRUE,10))),nr=5)
X_missing <- X_
X_missing[missing] <- NA
X_missing
#Calculate column means
X_col_means <- apply(X_missing,2,mean,na.rm=TRUE)
#loop through each column and replace missing values with mean of the column
X_imputed <- X_missing
for (i in c(1:ncol(X_imputed))){
v <- X_imputed[,i]
v[is.na(v)] <- X_col_means[i]
X_imputed[,i] <- v
}
(baseline <- quality(X_[missing],X_imputed[missing]))
quality <- function(X,Y){sqrt(sum((X-Y)^2))}
q <- rep(NA,5)
repr <- matrix(0,10,5)
for (i in 1:5){
repr <- repr +  D[i,i]*U[,i]%*%t(V[,i])
q[i] <- quality(X,repr)
}
quality <- function(X,Y){sqrt(sum((X-Y)^2))}
(baseline <- quality(X_[missing],X_imputed[missing]))
svd_X <- svd(X_imputed)
U <- svd_X$u
D <- diag(svd_X$d)
V <- svd_X$v
repr <- matrix(0,10,5)
for (i in 1:3){
repr <- repr +  D[i,i]*U[,i]%*%t(V[,i])
}
X[missing]
X_[missing]
repr[missing]
quality(X[missing],repr[missing])
quality(X_[missing],repr[missing])
rank_k_approx <- function (X,k){
#X: matrix to be approximate
#k: rank of approximation
svd_X <- svd(X)
U <- svd_X$u
D <- diag(svd_X$d)
V <- svd_X$v
repr <- matrix(0,nrow(X),ncol(X))
for (i in 1:k){
repr <- repr +  D[i,i]*U[,i]%*%t(V[,i])
}
return(repr)
}
impute_with_SVD <- function(X_missing,k){
# X_missing: Matrix with missing values
# k: rank of approximation to be used
#Calculate column means
X_col_means <- apply(X_missing,2,mean,na.rm =TRUE)
#identify missing elements
missing <- is.na(X_missing)
#loop through each column and replace missing values with mean of the column
for (i in c(1:ncol(X_missing))){
v <- X_missing[,i]
v[is.na(v)] <- X_col_means[i]
X_missing[,i] <- v
}
#Center the values on 0
#X_missing <- sweep(X_missing,2,X_col_means)
#Record newly imputed values in a vector
imputed <- X_missing[missing]
j<- 1
#record imputed elements in each iteration
imputed_list <- list()
imputed_list[[j]] <- imputed
while(TRUE){
##Compute rank-k SVD approximation
X_approx <- rank_k_approx(X_missing,k)
#Replace missing values with new approximation
X_missing[missing] <- X_approx[missing]
# break out of loop if imputed values stop changing
if (max(abs(imputed-X_approx[missing])) < 0.001 ) {break}
j <- j + 1
imputed <- X_approx[missing]
imputed_list[[j]] <- imputed
}
return(list(imputed_list,X_missing))
}
ans <-impute_with_SVD(X_missing,3)
imputed_matrix <- do.call(rbind,ans[[1]])
index <- c(1,seq(10,nrow(imputed_matrix),by=100),nrow(imputed_matrix))
imputed_matrix <- imputed_matrix[index,]
matplot(imputed_matrix,type='l')
X[missing] #Original values
X_[missing] #Original values
ans[[2]][missing]#Imputed values
quality(X[missing],ans[[2]][missing])
quality(X_[missing],ans[[2]][missing])
imputed_list_k <- list()
imputed_list_k[[3]] <- ans
for (i in c(1,2,4)){
imputed_list_k[[i]] <-impute_with_SVD(X_missing,i)
}
library(knitr)
quality_df <- data.frame('Method'=c('Column Means','Rank 1 Approx','Rank 2 Approx','Rank 3 Approx','Rank 4 Approx'),'RMSE' = baseline)
for( i in 1:4){
quality_df[i+1,'RMSE'] <- quality(X[missing],imputed_list_k[[i]][[2]][missing])
}
library(knitr)
quality_df <- data.frame('Method'=c('Column Means','Rank 1 Approx','Rank 2 Approx','Rank 3 Approx','Rank 4 Approx'),'RMSE' = baseline)
for( i in 1:4){
quality_df[i+1,'RMSE'] <- quality(X_[missing],imputed_list_k[[i]][[2]][missing])
}
kable(quality_df)
library(rmvnorm)
install.packages('mvtnorm')
?rmvnorm
library(mvtnorm)
?rmvnorm
?upper.tri
mat <- matrix(c(1:25),ncol=5)
mat
upper.tri(mat)
mat[upper.tri(mat)]
mat[lower.tri(mat)]
cor <- diag(5)
cor[upper.tri(cor)] <- c(0.2,0.4,0.3,0.6,0.5,0.7,0.8,0.7,0.4,0.3)
cor[lower.tri(cor)] <- c(0.2,0.4,0.6,0.8,0.3,0.5,0.7,0.7,0.4,0.3)
cor
cor[upper.tri(cor)]
cor[lower.tri(cor)]
?rmvnorm
cov <- diag(5)
cov[upper.tri(cor)] <- c(0.2,0.4,0.3,0.6,0.5,0.7,0.8,0.7,0.4,0.3)
cov[lower.tri(cor)] <- c(0.2,0.4,0.6,0.8,0.3,0.5,0.7,0.7,0.4,0.3)
rmvnorm(1,mean=rep(0,5),sigam=cov)
rmvnorm(1,mean=rep(0,5),sigma =cov)
cov
cov <- diag(5)
cov[upper.tri(cor)] <- c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1,0.2)
cov[lower.tri(cor)] <- c(0.2,0.4,0.6,0.8,0.3,0.5,0.7,0.7,0.4,0.3)
cov
cov[lower.tri(cor)] <- cov[upper.tri(cor)]
cov
cov[lower.tri(cor)] <- cov[rev(upper.tri(cor))]
cov
cov[upper.tri(cor)] <- c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1,0.2)
cov[lower.tri(cor)] <- t(cov)[lower.tri(cov)]
cov
cov <- diag(5)
cov[upper.tri(cor)] <- c(0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.1,0.2)
cov[lower.tri(cor)] <- t(cov)[lower.tri(cov)]
rmvnorm(1,mean=rep(0,5),sigma =cov)
cov[upper.tri(cor)] <- runif(10)
cov <- diag(5)
cov[upper.tri(cor)] <- runif(10)
cov[lower.tri(cor)] <- t(cov)[lower.tri(cov)]
set.seed(0)
cov <- diag(5)
cov[upper.tri(cor)] <- runif(10)
cov[lower.tri(cor)] <- t(cov)[lower.tri(cov)]
cov
rmvnorm(1,mean=rep(0,5),sigma =cov)
?runif
#Create a covariance matrix
set.seed(0)
cov <- diag(5)
cov[upper.tri(cor)] <- runif(10,-10,10)
cov[lower.tri(cor)] <- t(cov)[lower.tri(cov)]
#Simulate
rmvnorm(1,mean=rep(0,5),sigma =cov)
#Create a covariance matrix
set.seed(0)
cov <- diag(5)
cov[upper.tri(cor)] <- runif(-1,-1,10)
#Create a covariance matrix
set.seed(0)
cov <- diag(5)
cov[upper.tri(cor)] <- runif(-1,1,10)
#Create a covariance matrix
set.seed(0)
cov <- diag(5)
cov[upper.tri(cor)] <- runif(10,-1,1)
cov[lower.tri(cor)] <- t(cov)[lower.tri(cov)]
#Simulate
cov
rmvnorm(1,mean=rep(0,5),sigma =cov)
m <- matrix(rnorm(50),ncol=5)
cov(m)
cor(m)
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
165*5
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::update_meta_addin()
blogdown:::insert_image_addin()
800/900
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
